/* ------------------------- START 'MIXINS' ------------------------- */
// Media Query + Margins
@mixin mq($start: null, $end: null, $mt: null, $mr: null, $mb: null, $ml: null) {
  @if ($end and map_has_key($breakpoints, $end)) {
    $maxWidth: map_get($breakpoints, $end);
    $upToMaxWidth: $maxWidth - 1px;

    @if ($start and map_has_key($breakpoints, $start)) {
      $minWidth: map_get($breakpoints, $start);

      @media screen and (min-width: $minWidth) and (max-width: $upToMaxWidth) {
        @include margins($mt, $mr, $mb, $ml);

        @content;
      }
    } @else {
      @media screen and (max-width: $upToMaxWidth) {
        @include margins($mt, $mr, $mb, $ml);

        @content;
      }
    }
  } @else if ($start and map_has_key($breakpoints, $start)) {
    $minWidth: map_get($breakpoints, $start);

    @media screen and (min-width: $minWidth) {
      @include margins($mt, $mr, $mb, $ml);

      @content;
    }
  }
}

/* Margin converter */ /* prettier-ignore */
@mixin margins($mt: null, $mr: null, $mb: null, $ml: null) {
  $margins: ('top': $mt, 'right': $mr, 'bottom': $mb, 'left': $ml,);
  @each $side, $direction in $margins { @if map-get($margins, $side) {
      #{margin-#{$side}}: map-get($margins, $side); }}}

/* Font-size */ /* prettier-ignore */
@mixin fz($fz: null, $lh: null, $fw: null, $ls: null, $clr: null, $teo: null) {
  @if $fz {                                   font-size:   $fz; }
  @if $fw {                                   font-weight: $fw; }
  @if ($fz and $lh and comparable($fz, $lh)) {
                                              line-height: (round($lh * $precision / $fz)) / $precision;
  } @else if ($fz == null) { $fz: $base-fz-body;
    @if $lh and comparable($fz, $lh) {        line-height: (round($lh * $precision / $fz)) / $precision; }}
  @if $clr {                                  color: $clr; }
  @if $teo {                                  text-overflow: $teo; }
  @if $ls  {                                  letter-spacing: $ls; }
}

/* Transitions */
@mixin tr($tr-key: 'card', $tr-time: 'time', $tr-map: $tr) {
  @if ($tr-key == 'anime') {
    transition: unquote(map-get($tr-map, $tr-key))
      map-get($tr-map, $tr-time)
      map-get($tr-map, 'cubic');
  } @else {
    transition-property: unquote(map-get($tr-map, $tr-key));
    transition: map-get($tr-map, $tr-time) map-get($tr-map, 'cubic');
  }
}

/* Dark mode */ /* prettier-ignore */
@mixin dark($c: 'body-color', $bgc: 'body-bg', $fi: null, $st: null) {
  @media (prefers-color-scheme: dark) {
    @if ( $c   )  { color:            color( $c,    $theme-dark ); }
    @if ( $bgc )  { background-color: color( $bgc,  $theme-dark ); }
    @if ( $fi  )  { fill:             color( $fi,   $theme-dark ); }
    @if ( $st  )  { stroke:           color( $st,   $theme-dark ); }

    @content;
  }
}

/* -------------------------- END 'MIXINS' -------------------------- */
