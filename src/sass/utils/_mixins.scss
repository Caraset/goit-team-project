@mixin font($fs: 14px, $fw: 400, $lh: 1.71, $ls: 0.03em) {
  font-size: $fs;
  font-weight: $fw;
  line-height: $lh;
  letter-spacing: $ls;
}
/* ------------------------- START 'MIXINS' ------------------------- */
/* Media Query + Margins */ /* prettier-ignore */
@mixin mq(
  $start: null, $end: null,
  $mt: null, $mr: null, $mb: null, $ml: null,
  $pt: null, $pr: null, $pb: null, $pl: null
) {
  @if ($end and map_has_key($breakpoints, $end)) {
    $maxWidth: map_get($breakpoints, $end);
    $upToMaxWidth: $maxWidth - 1px;

    @if ($start and map_has_key($breakpoints, $start)) {
      $minWidth: map_get($breakpoints, $start);

      @media screen and (min-width: $minWidth) and (max-width: $upToMaxWidth) {
        @include paddings($pt, $pr, $pb, $pl);
        @include margins($mt, $mr, $mb, $ml);

        @content;
      }
    } @else {
      @media screen and (max-width: $upToMaxWidth) {
        @include paddings($pt, $pr, $pb, $pl);
        @include margins($mt, $mr, $mb, $ml);

        @content;
      }
    }
  } @else if ($start and map_has_key($breakpoints, $start)) {
    $minWidth: map_get($breakpoints, $start);

    @media screen and (min-width: $minWidth) {
      @include paddings($pt, $pr, $pb, $pl);
      @include margins($mt, $mr, $mb, $ml);

      @content;
    }
  }
}

/* Font-size */ /* prettier-ignore */
@mixin fz($fz: null, $lh: null, $fw: null, $ls: null, $clr: null, $teo: null) {
  @if $fz {                                   font-size:   $fz; }
  @if $fw {                                   font-weight: $fw; }
  @if ($fz and $lh and comparable($fz, $lh)) {
                                              line-height: (round($lh * $precision / $fz)) / $precision;
  } @else if ($fz == null) { $fz: $base-fz-body;
    @if $lh and comparable($fz, $lh) {        line-height: (round($lh * $precision / $fz)) / $precision; }}
  @if $clr {                                  color: $clr; }
  @if $teo {                                  text-overflow: $teo; }
  @if $ls  {                                  letter-spacing: $ls; }
}

/* Transitions */
@mixin tr($tr-key: 'card', $tr-time: 'time', $tr-map: $tr) {
  @if ($tr-key == 'anime') {
    transition: unquote(map-get($tr-map, $tr-key))
      map-get($tr-map, $tr-time)
      map-get($tr-map, 'cubic');
  } @else {
    transition-property: unquote(map-get($tr-map, $tr-key));
    transition: map-get($tr-map, $tr-time) map-get($tr-map, 'cubic');
  }
}

/* Dark mode */ /* prettier-ignore */
@mixin dark($c: 'body-color', $bgc: 'body-bg', $fi: null, $st: null) {
  @media (prefers-color-scheme: dark) {
    @if ( $c   )  { color:            color( $c,    $theme-dark ); }
    @if ( $bgc )  { background-color: color( $bgc,  $theme-dark ); }
    @if ( $fi  )  { fill:             color( $fi,   $theme-dark ); }
    @if ( $st  )  { stroke:           color( $st,   $theme-dark ); }

    @content;
  }
}

/* Padding converter */
@mixin paddings($pt: null, $pr: null, $pb: null, $pl: null) {
  @if ($pt or $pr or $pb or $pl) {
    @if (($pt == $pb) and ($pb == $pr) and ($pr == $pl)) {
      padding: $pt;
    } @else if (($pt == $pb) and ($pr == $pl)) {
      padding: $pt $pr;
    } @else if
      (
        ((($pt != $pb) and (($pt and $pb) != null)) and (($pr == $pl) and ($pr != null))) or
          ((($pr != $pl) and (($pr and $pl) != null)) and (($pt == $pb) and ($pt != null)))
      )
    {
      padding: $pt $pr $pb;
    } @else if
      ((($pt != $pb) and (($pt and $pb) != null)) and (($pr != $pl) and (($pr and $pl) != null)))
    {
      padding: $pt $pr $pb $pl;
    } @else {
      /* prettier-ignore */
      $paddings: ('top': $pt, 'right': $pr, 'bottom': $pb, 'left': $pl,);
      /* prettier-ignore */
      @each $side, $direction in $paddings { @if map-get($paddings, $side) {
        #{padding-#{$side}}: map-get($paddings, $side); }}
    }
  }

  @content;
}

/* Margin converter */
@mixin margins($mt: null, $mr: null, $mb: null, $ml: null) {
  @if ($mt or $mr or $mb or $ml) {
    @if (($mt == $mb) and ($mb == $mr) and ($mr == $ml)) {
      margin: $mt;
    } @else if (($mt == $mb) and ($mr == $ml)) {
      margin: $mt $mr;
    } @else if
      (
        ((($mt != $mb) and (($mt and $mb) != null)) and (($mr == $ml) and ($mr != null))) or
          ((($mr != $ml) and (($mr and $ml) != null)) and (($mt == $mb) and ($mt != null)))
      )
    {
      margin: $mt $mr $mb;
    } @else if
      ((($mt != $mb) and (($mt and $mb) != null)) and (($mr != $ml) and (($mr and $ml) != null)))
    {
      margin: $mt $mr $mb $ml;
    } @else {
      /* prettier-ignore */
      $margins: ('top': $mt, 'right': $mr, 'bottom': $mb, 'left': $ml,);
      /* prettier-ignore */
      @each $side, $direction in $margins { @if map-get($margins, $side) {
        #{margin-#{$side}}: map-get($margins, $side); }}
    }
  }

  @content;
}

/* -------------------------- END 'MIXINS' -------------------------- */
